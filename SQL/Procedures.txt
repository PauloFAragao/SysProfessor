USE dbprofessor

----------------------- Alunos -----------------------

--procedimento show, para mostrar os alunos
CREATE PROC sp_show_students
AS
BEGIN
	SELECT TOP 75 * FROM alunos
	ORDER BY numero ASC
END;
GO

-- Procedimento para buscar aluno por nome
CREATE PROC sp_search_student_name
    @name VARCHAR(100)
AS
BEGIN
    SELECT * 
    FROM alunos 
    WHERE nome LIKE @name + '%' 
    ORDER BY numero ASC;
END;
GO

--procedimento inserir aluno
CREATE PROCEDURE sp_insert_student_and_scores
    @name NVARCHAR(100),
    @num INT
AS
BEGIN
    DECLARE @idstudent INT;

    -- Adicionar aluno na tabela alunos
    INSERT INTO alunos (nome, numero) VALUES (@name, @num);

    -- Capturar o ID do aluno inserido
    SET @idstudent = SCOPE_IDENTITY();

    -- Inserir notas para cada matéria cadastrada
    INSERT INTO notas (idaluno, idmateria, notapt, notast, notatt, notaqt, media)
    SELECT @idstudent, idmateria, 0.00, 0.00, 0.00, 0.00, 0.00
    FROM materias;
END;
GO

--procedimento editar aluno
CREATE PROC sp_edit_student
	@idstudent INT,
	@name VARCHAR(100),
	@num INT
AS
BEGIN
	UPDATE alunos
	SET nome = @name, 
		numero = @num
	WHERE idaluno = @idstudent
END;
GO

--procedimento deletar aluno
CREATE PROC sp_del_studant
    @idstudent INT
AS
BEGIN
    DELETE FROM alunos
    WHERE idaluno = @idstudent;
END;
GO

--procedimento para verificar a quantidade de alunos registrados
CREATE PROCEDURE sp_get_studants_amount
	@amount INT OUTPUT
AS
BEGIN
    SET @amount = 0;
    SELECT @amount = COUNT(*) FROM alunos;
END;
GO


----------------------- Materias -----------------------


--procedimento show, para mostrar as materias
CREATE PROC sp_show_discipline
AS
BEGIN
	SELECT TOP 75 * FROM materias
	ORDER BY idmateria DESC
END;
GO

--procedimento buscar materia por nome
CREATE PROC sp_search_discipline_name
	@name VARCHAR(100)
AS 
BEGIN
	SELECT * FROM materias WHERE nome LIKE @name+ '%'
END;
GO

--procedimento inserir materia
CREATE PROCEDURE sp_insert_discipline_and_scores
    @name NVARCHAR(100),
    @average DECIMAL(5, 2)
AS
BEGIN
    DECLARE @idmateria INT;

    -- Adicionar aluno na tabela alunos
    INSERT INTO materias (nome, media) VALUES (@name, @average);

    -- Capturar o ID do aluno inserido
    SET @idmateria = SCOPE_IDENTITY();

    -- Inserir notas para cada matéria cadastrada
    INSERT INTO notas (idaluno, idmateria, notapt, notast, notatt, notaqt, media)
    SELECT idaluno, @idmateria, 0.00, 0.00, 0.00, 0.00, 0.00
    FROM alunos;

END;
GO

--procedimento editar materia
CREATE PROC sp_edit_discipline
	@iddiscipline INT,
	@name VARCHAR(100),
	@average DECIMAL(5, 2)
AS
BEGIN
	UPDATE materias
	SET nome = @name, 
		media = @average
	WHERE idmateria = @iddiscipline
END;
GO

--procedimento deletar materia
CREATE PROC sp_delete_discipline
	@iddiscipline INT
AS
BEGIN
	DELETE FROM materias 
	WHERE idmateria = @iddiscipline
END;
GO

--procedimento para verificar a quantidade de materias registrados
CREATE PROCEDURE sp_get_discipline_amount
	@amount INT OUTPUT
AS
BEGIN
    SET @amount = 0;
    SELECT @amount = COUNT(*) FROM materias;
END;
GO


----------------------- Notas -----------------------


--procedimento buscar notas por idaluno
CREATE PROC sp_search_scores_from_studant
	@idstudent INT
AS 
BEGIN
	SELECT * FROM notas 
	WHERE idaluno = @idstudent
	ORDER BY idnotas ASC
END;
GO

--procedimento buscar notas por materias
CREATE PROC sp_search_scores_from_discipline
	@iddiscipline INT
AS
BEGIN
	SELECT * FROM notas 
	WHERE idmateria = @iddiscipline
	ORDER BY idnotas ASC
END;
GO

--procedimento para buscar materias por nome e id do aluno
CREATE PROC sp_search_studentid_discipline
    @idstudent INT,
    @name VARCHAR(100)
AS
BEGIN
    SET NOCOUNT ON;

    SELECT n.* 
    FROM notas n
    JOIN materias m ON n.idmateria = m.idmateria
    WHERE n.idaluno = @idstudent
      AND m.nome LIKE @name + '%' ;
END;
GO

--procedimento para buscar alunos por nome e id da materia
CREATE PROC sp_search_disciplineid_student
    @iddiscipline INT,
    @name VARCHAR(100)
AS
BEGIN
    SET NOCOUNT ON;

    SELECT n.* 
    FROM notas n
    JOIN alunos m ON n.idaluno = m.idaluno
    WHERE n.idmateria = @iddiscipline
      AND m.nome LIKE @name + '%' ;
END;
GO

--procedimento editar notas
CREATE PROC sp_edit_scores
	@idscores INT,
	@scorefit DECIMAL(5, 2),
	@scorest DECIMAL(5, 2),
	@scorett DECIMAL(5, 2),
	@scorefot DECIMAL(5, 2),
	@average DECIMAL(5, 2)
AS
BEGIN
	UPDATE notas
	SET notapt = @scorefit,
		notast = @scorest,
		notatt = @scorett,
		notaqt = @scorefot,
		media = @average
	WHERE idnotas = @idscores
END;
GO


----------------------- Configurações -----------------------


--procedimento para ler as configurações
CREATE PROCEDURE sp_read_configurations
    @professor_name VARCHAR(100) OUTPUT,
    @scholl_name VARCHAR(100) OUTPUT
AS
BEGIN
    SET @professor_name = NULL;
    SET @scholl_name = NULL;

    IF EXISTS (SELECT 1 FROM dbo.configuracao)
    BEGIN
        SELECT TOP 1
            @professor_name = nome_professor,
            @scholl_name = nome_escola
        FROM dbo.configuracao;
    END
END;
GO

--prodecimento para editar as configurações
CREATE PROC sp_edit_configurations
	@id_conf INT,
	@professor_name VARCHAR(100),
	@scholl_name VARCHAR(100)
AS
BEGIN
	UPDATE configuracao
	SET nome_professor = @professor_name,
		nome_escola = @scholl_name
	WHERE id = @id_conf
END;
GO

--procedimento inserir configuração
CREATE PROC sp_insert_configurations
	@professor_name VARCHAR(100),
	@scholl_name VARCHAR(100)
AS
BEGIN
	INSERT INTO configuracao
	VALUES (@professor_name, @scholl_name)
END;
GO

--procedimento para verificar se existe alguma configuração e pegar o id
CREATE PROCEDURE sp_verify_configurations_data
    @Registered BIT OUTPUT,
    @Id INT OUTPUT
AS
BEGIN
    SET @Registered = 0;
    SET @Id = -1;

    IF EXISTS (SELECT 1 FROM dbo.configuracao)
    BEGIN
        SELECT TOP 1 @Id = id FROM dbo.configuracao;

        SET @Registered = 1;
    END
END;
GO